// src/hooks/useCommunity.tsx
import { useState, useEffect } from 'react'
import { getCommunityStats, getRecentPosts, getActiveMembers } from '@/services/circleApi'

interface CommunityStats {
  members_count: number
  posts_count: number
  comments_count: number
}

export function useCommunityStats() {
  const [stats, setStats] = useState<CommunityStats>({
    members_count: 0,
    posts_count: 0,
    comments_count: 0
  })
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function fetchStats() {
      try {
        setLoading(true)
        const result = await getCommunityStats()
        
        if (result.success) {
          setStats(result.data)
        } else {
          setError(result.error || 'Erro ao carregar estat√≠sticas')
        }
      } catch (err) {
        setError('Erro ao conectar com a comunidade')
      } finally {
        setLoading(false)
      }
    }

    fetchStats()
  }, [])

  return { stats, loading, error }
}

export function useRecentPosts(limit = 10) {
  const [posts, setPosts] = useState<any[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)

  useEffect(() => {
    async function fetchPosts() {
      try {
        setLoading(true)
        const result = await getRecentPosts(limit)
        
        if (result.success) {
          setPosts(result.data)
        } else {
          setError(result.error || 'Erro ao carregar posts')
        }
      } catch (err) {
        setError('Erro ao conectar com a comunidade')
      } finally {
        setLoading(false)
      }
    }

    fetchPosts()
  }, [limit])

  return { posts, loading, error }
}